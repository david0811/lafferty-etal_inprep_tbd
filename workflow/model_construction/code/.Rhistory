library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages(c("bayesrules", "tidyverse", "janitor", "rstanarm",
"bayesplot", "tidybayes", "broom.mixed", "modelr",
"e1071", "forcats"),
dependencies = TRUE)
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(rstan)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages(c("bayesrules", "tidyverse", "janitor", "rstanarm",
"bayesplot", "tidybayes", "broom.mixed", "modelr",
"e1071", "forcats"),
dependencies = TRUE)
library(tidyverse)
library(rstan)
library(rstanarm)
library(bayesplot)
library(tidybayes)
df_county_obs <- read_csv('../input_data/gridmet_county_weather_variables_1979-2020.csv')
df_mw_obs <- read_csv('../input_data/gmfd_midwest_tavg_1948-2016.csv')
typeof(df_mw_obs)
df_mw_obs
##################################################
# Model 1) County GDD ~ N(Midwest Tavg, sigma)
##################################################
df <- merge(x = df_county_obs,
y = df_mw_obs,
by = "year",
all= T)
df
##################################################
# Model 1) County GDD ~ N(Midwest Tavg, sigma)
##################################################
df <- full_join(x = df_county_obs,
y = df_mw_obs,
by = "year")
df
##################################################
# Model 1) County GDD ~ N(Midwest Tavg, sigma)
##################################################
df <- inner_join(x = df_county_obs,
y = df_mw_obs,
by = "year")
df
# Visualize data
ggplot(df, aes(x = tavg_mw, y = GDD)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
# Visualize data
ggplot(df, aes(x = tavg_mw, y = EDD)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
# Visualize data
ggplot(df, aes(x = tavg_mw, y = tavg)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
# Bayesian model
bike_model <- stan_glm(tavg ~ tavg_mw, data = df,
family = gaussian,
prior_intercept = normal(0, 100),
prior = normal(0, 10),
prior_aux = exponential(0.0008),
chains = 4, iter = 5000*2, seed = 84735)
df_county_obs
##################################################
# County GDD : County Tavg
##################################################
# Visualize data
ggplot(df, aes(x = tavg_mw, y = GDD)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
##################################################
# County GDD : County Tavg
##################################################
# Visualize data
ggplot(df_county_obs, aes(x = tavg, y = GDD)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
##################################################
# County GDD : County Tavg
##################################################
# Visualize data
ggplot(df_county_obs, aes(x = tavg, y = EDD)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
##################################################
# County GDD : County Tavg
##################################################
# Visualize data
ggplot(df_county_obs, aes(x = tavg, y = GDD)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
# Bayesian model
GDD_model <- stan_glm(GDD ~ tavg, data = df_county_obs,
family = gaussian,
prior_intercept = normal(0, 100),
prior = normal(0, 10),
prior_aux = exponential(0.0008),
chains = 4, iter = 5000*2, seed = 84735)
# Effective sample size ratio and Rhat
neff_ratio(GDD_model)
rhat(GDD_model)
# Trace & density plots of parallel chains
mcmc_trace(GDD_model, size = 0.1)
mcmc_dens_overlay(GDD_model)
# Summarize posterior
tidy(GDD_model, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.80)
library(broom.mixed)
# Summarize posterior
tidy(GDD_model, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.80)
# Summarize posterior
tidy(GDD_model, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.99)
# Plot predictive
df_county_obs %>%
data_grid(tavg = seq_range(tavg, n = 101)) %>%
add_predicted_draws(GDD_model) %>%
ggplot(aes(x = tavg, y = GDD)) +
stat_lineribbon(aes(y = .prediction), .width = c(.99, .95, .8, .5), color = "#08519C") +
geom_point(data = df_county_obs, size = 2) +
scale_fill_brewer()
library(modelr)
# Plot predictive
df_county_obs %>%
data_grid(tavg = seq_range(tavg, n = 101)) %>%
add_predicted_draws(GDD_model) %>%
ggplot(aes(x = tavg, y = GDD)) +
stat_lineribbon(aes(y = .prediction), .width = c(.99, .95, .8, .5), color = "#08519C") +
geom_point(data = df_county_obs, size = 2) +
scale_fill_brewer()
# Plot predictive
df_county_obs %>%
data_grid(tavg = seq_range(tavg, n = 101)) %>%
add_predicted_draws(GDD_model) %>%
ggplot(aes(x = tavg, y = GDD)) +
stat_lineribbon(aes(y = .prediction), .width = c(.99, .95, .8, .5), color = "#08519C") +
geom_point(data = df_county_obs, size = 0.1) +
scale_fill_brewer()
##################################################
# Read all relevant data
##################################################
df_county_obs
##################################################
# County Precip
##################################################
# Visualize data
ggplot(df_county_obs, aes(x = tavg, y = prcp)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
##################################################
# County EDD
##################################################
# Visualize data
ggplot(df_county_obs, aes(x = tavg, y = EDD)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
# Posterior Predictive Check
pp_check(GDD_model, nreps = 50) +
xlab("County GDD")
# Plot predictive
df_county_obs %>%
data_grid(tavg = seq_range(tavg, n = 101)) %>%
add_predicted_draws(GDD_model) %>%
ggplot(aes(x = tavg, y = GDD)) +
stat_lineribbon(aes(y = .prediction), .width = c(.99, .95, .8, .5), color = "#08519C") +
geom_point(data = df_county_obs, size = 0.1) +
scale_fill_brewer()
# Posterior Predictive Check
pp_check(GDD_model, nreps = 50) +
xlab("County GDD")
# Posterior Predictive Check
pp_check(GDD_model, nreps = 50) +
xlab("County GDD") +
theme_grey()
##################################################
# County EDD
##################################################
# Visualize data
ggplot(df_county_obs, aes(x = tavg, y = log(EDD))) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
prediction_summary(GDD_model, data = df_county_obs)
library(bayesrules)
prediction_summary(GDD_model, data = df_county_obs)
##################################################
# County EDD
##################################################
# Visualize data
ggplot(df_county_obs, aes(x = log(tavg), y = log(EDD))) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
##################################################
# County EDD
##################################################
# Visualize data
ggplot(df_county_obs, aes(x = GDD, y = EDD)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
##################################################
# County EDD
##################################################
# Visualize data
ggplot(df_county_obs, aes(x = tavg, y = EDD)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
##################################################
# County EDD
##################################################
# Visualize data
ggplot(df_county_obs, aes(x = tavg, y = log(EDD)) +
##################################################
# County EDD
##################################################
# Visualize data
ggplot(df_county_obs, aes(x = tavg, y = log(EDD))) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
##################################################
# County EDD
##################################################
# Visualize data
ggplot(df_county_obs, aes(x = tavg, y = log(EDD))) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
# Bayesian model
EDD_model <- stan_glm(log(EDD) ~ tavg, data = df_county_obs,
family = gaussian,
prior_intercept = normal(0, 100),
prior = normal(0, 10),
prior_aux = exponential(0.0008),
chains = 4, iter = 5000*2, seed = 84735)
# Bayesian model
EDD_model <- stan_glm(EDD ~ tavg, data = df_county_obs,
family = gaussian(link='log'),
prior_intercept = normal(0, 100),
prior = normal(0, 10),
prior_aux = exponential(0.0008),
chains = 4, iter = 5000*2, seed = 84735)
# Bayesian model
GDD_model <- stan_lm(GDD ~ tavg, data = df_county_obs,
family = gaussian,
prior_intercept = normal(0, 100),
prior = normal(0, 10),
prior_aux = exponential(0.0008),
chains = 4, iter = 5000*2,
cores = 3, seed = 84735)
# Effective sample size ratio and Rhat
neff_ratio(GDD_model)
rhat(GDD_model)
# Bayesian model
GDD_model <- stan_glm(GDD ~ tavg, data = df_county_obs,
family = gaussian,
prior_intercept = normal(0, 100),
prior = normal(0, 10),
prior_aux = exponential(0.0008),
chains = 4, iter = 5000*2,
cores = 3, seed = 84735)
# Effective sample size ratio and Rhat
neff_ratio(GDD_model)
rhat(GDD_model)
# Trace & density plots of parallel chains
mcmc_trace(GDD_model, size = 0.1)
mcmc_dens_overlay(GDD_model)
# Summarize posterior
tidy(GDD_model, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.99)
# Plot predictive
df_county_obs %>%
data_grid(tavg = seq_range(tavg, n = 101)) %>%
add_predicted_draws(GDD_model) %>%
ggplot(aes(x = tavg, y = GDD)) +
stat_lineribbon(aes(y = .prediction), .width = c(.99, .95, .8, .5), color = "#08519C") +
geom_point(data = df_county_obs, size = 0.1) +
scale_fill_brewer()
# Summarize posterior
tidy(GDD_model, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.99)
mcmc_dens_overlay(GDD_model)
# Bayesian model
GDD_model <- stan_glm(GDD ~ tavg, data = df_county_obs,
family = gaussian,
prior_intercept = normal(0, 1000),
prior = normal(100, 100),
prior_aux = exponential(0.1),
chains = 4, iter = 5000*2,
cores = 3, seed = 84735)
# Effective sample size ratio and Rhat
neff_ratio(GDD_model)
rhat(GDD_model)
# Trace & density plots of parallel chains
mcmc_trace(GDD_model, size = 0.1)
mcmc_dens_overlay(GDD_model)
plot_gamma(shape = 1, rate = 0.0008) +
labs(x = "sigma", y = "pdf")
plot_gamma(shape = 1, rate = 0.1) +
labs(x = "sigma", y = "pdf")
plot_gamma(shape = 1, rate = 0.01) +
labs(x = "sigma", y = "pdf")
# Bayesian model
GDD_model <- stan_glm(GDD ~ tavg, data = df_county_obs,
family = gaussian,
# prior_intercept = normal(0, 1000, autoscale = TRUE),
# prior = normal(100, 100, autoscale = TRUE),
# prior_aux = exponential(0.01, autoscale = TRUE),
chains = 4, iter = 5000*2,
cores = 3, seed = 84735)
prior_summary(GDD_model)
# Effective sample size ratio and Rhat
neff_ratio(GDD_model)
rhat(GDD_model)
# Trace & density plots of parallel chains
mcmc_trace(GDD_model, size = 0.1)
mcmc_dens_overlay(GDD_model)
# Summarize posterior
tidy(GDD_model, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.99)
# Plot predictive
df_county_obs %>%
data_grid(tavg = seq_range(tavg, n = 101)) %>%
add_predicted_draws(GDD_model) %>%
ggplot(aes(x = tavg, y = GDD)) +
stat_lineribbon(aes(y = .prediction), .width = c(.99, .95, .8, .5), color = "#08519C") +
geom_point(data = df_county_obs, size = 0.1) +
scale_fill_brewer()
# Posterior predictive check
pp_check(GDD_model, nreps = 50) +
xlab("County GDD") +
theme_grey()
# Posterior predictive check
pp_check(GDD_model, nreps = 100) +
xlab("County GDD") +
theme_grey()
prior_summary(GDD_model)
mcmc_dens_overlay(GDD_model)
# Bayesian model
GDD_model <- stan_glm(GDD ~ tavg, data = df_county_obs,
family = gaussian,
# prior_intercept = normal(0, 1000, autoscale = TRUE),
# prior = normal(100, 100, autoscale = TRUE),
# prior_aux = exponential(0.01, autoscale = TRUE),
chains = 3, iter = 10000*2,
cores = 3, seed = 84735)
# Effective sample size ratio and Rhat
neff_ratio(GDD_model)
rhat(GDD_model)
# Trace & density plots of parallel chains
mcmc_trace(GDD_model, size = 0.1)
mcmc_dens_overlay(GDD_model)
# Summarize posterior
tidy(GDD_model, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.99)
# Plot predictive
df_county_obs %>%
data_grid(tavg = seq_range(tavg, n = 101)) %>%
add_predicted_draws(GDD_model) %>%
ggplot(aes(x = tavg, y = GDD)) +
stat_lineribbon(aes(y = .prediction), .width = c(.99, .95, .8, .5), color = "#08519C") +
geom_point(data = df_county_obs, size = 0.1) +
scale_fill_brewer()
# Posterior predictive check
pp_check(GDD_model, nreps = 100) +
xlab("County GDD") +
theme_grey()
# Bayesian model
GDD_model <- stan_glm(GDD ~ tavg, data = df_county_obs,
family = gaussian,
prior_intercept = normal(-1000, 100),
prior = normal(150, 100),
prior_aux = exponential(0.0008),
chains = 3, iter = 10000*2,
cores = 3, seed = 84735)
prior_summary(GDD_model)
# Effective sample size ratio and Rhat
neff_ratio(GDD_model)
rhat(GDD_model)
# Trace & density plots of parallel chains
mcmc_trace(GDD_model, size = 0.1)
mcmc_dens_overlay(GDD_model)
# Summarize posterior
tidy(GDD_model, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.99)
##################################################
# County GDD
##################################################
# Visualize data
ggplot(df_county_obs, aes(x = tavg, y = GDD)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE)
df_county_obs
